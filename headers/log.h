/*
    We need to:
    1- Generate two log files before the execution of any program, one containing the initial values of the register,
       and the other containing a list representing the memory of the IAS computer intiailly.
    2- After every fetch-execute cycle, we want to first add a new entry containing the updated values of the registers
       to the logfile containing the values of the register, and second, in the logfile that contains the memory values of 
       the IAS computer, add -> <new value> next to the memory word that was changed.
       
    To achieve this, we need to be able to:
    1- create a new register logfile
    2- create a new memory dump logfile
    3- update the register logfile 
    4- update the memory dump logfile
    5- create a defualt directory to save this information
*/

//global variables
extern char* LOGS_PATH; //the path to the directory containing the logs generated by the IAS program
extern FILE* LOGS_DIR;
extern FILE* LOG_DIR; //difference between it and LOGS_DIR is that the former stores the logs for a particular IAS program execution, while the latter is just a root directory for all the logs
extern FILE* LOG_REGISTER;
extern FILE* LOG_MEMORY_DMP;

//constants
extern const char* REGISTER_LOGFILE_NAME;
extern const char* MEMORYDMP_LOGFILE_NAME;
extern const char* LOGS_PATH_PREFIX_LINUX;
extern const char* LOGS_PATH_POSTFIX;

//function headers
int create_logspath(); //function that determines the logs path based on the current user's name
bool exists_logsdir(); //function that checks whether the logs directory exists
int create_logsdir(); //function that creates a new logs directory

int create_logdir(); //function that creates a new directory in which the register and memory dump logfiles will be created
char* generate_logdirname(); //function that generates a name for a logdir based on the current time
int createlog_register(); //function that creates a new register logfile
int createlog_memorydmp(); //function that creates a new memorydmp logfile
int updatelog_register(); //function that updates an existing register logfile
int updatelog_memorydmp(); //function that updates an existing memorydmp logfile